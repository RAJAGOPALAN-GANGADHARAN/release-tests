language: cpp
compiler: gcc
sudo: required
dist: bionic
git:
  depth: 3

addons:
  apt:
    packages:
      - p7zip-full
      - ninja-build
      - libhunspell-dev
      - libgl1-mesa-dev
      - libgstreamer-plugins-base1.0-0
      - libpulse-mainloop-glib0
      - libxkbcommon-x11-0
      - python3-pip
      - python3-setuptools
  homebrew:
    update: true
    packages:
      - p7zip
      - ninja
      - hunspell

env:
  global:
    - QT_VERSION=5.14.1
    - PyQt5_VERSION=5.14.1
    - QTWEBKIT_BRANCH=5.212
    - QTWEBKIT_BUILD_NUMBER=1584941372
    - QT_INSTALL_DIR=~/Qt
    - QT_MODULES="qtbase qtdeclarative qtlocation qtmultimedia qtsensors qtwebchannel qtsvg qtxmlpatterns"
    - HOST_N_CORES=2
    - secure: "Y8oBFMmP/N4qFAsCW7an9G7k7dzwdfgUJwVAI7iXTipK9xBCTmacGrE8qe+A+XdSg4LVB7hgroAh8D3LVihbETfS7eFDUJWDHqAXBp4mf7eLqEJyZRLAQnJycrLBjzUd9pHzkFaNr9kntMsThkysvGEohrsD8qPcwNE8LNleV4vlJmCoAIxvPPqiFI+7wG7Wy825SCT1JQg+owr3XeW4Fm9novPzNJXMtNq+NykuDchW0yBvyDYOtev90lsidKdLc4hRNWalW+BxvoKeyzgcLCwXqeKzEx0XZdvYc5kjp3xP3sngDjio9Gp0MrniAEr3FOrx37kc6Rfaas7RL4ybkVJgxSfzEQ4Z71a9Frcm65QuJ1AIDW08HIP/5VMeABv+XBupkXobJiAtUgEyVkUq4Wm+xSrMb6K+gkGhDuBe0uUTxhGtneH5c14m2t67Iaq1UpItLAI2FW/aSBTvNDHOH6itKVIHJ8zkEw/IoKP4K0E4oMMPgBMuaYqv7YDTO2PEDzMWNhW5oQTTNumMpLdsf2bhcZ8St1JvVNIZn3m9MlmDMxR93BO5qg/0rLPfMucOk3l6suDELhT3NxMINGfoc+s7mZZkmjh5wt1n2LgzraK7hfhAPRc6IQCpA14tBBOUKRam7gscEo8YKuIAxEW9V2DzayzoolVMJZK57W97JlM="

before_deploy:
  - sed -ie "s|TRAVIS_BUILD_NUMBER|${TRAVIS_BUILD_NUMBER}|" bintray.json

deploy:
  provider: bintray
  user: annulen
  file: bintray.json
  edge: true # opt in to dpl v2
  on:
    condition: $DEPLOY = 1

after_deploy:
  - ./bintray_upload.sh qa-*.7z
  - ./bintray_upload.sh otter-browser-packages/*

matrix:
  include:
  - name: "macOS x86_64"
    os: osx
    osx_image: xcode10.1
    env:
      CMAKE_GENERATOR=Ninja
      DEPLOY=1   
      TOOLCHAIN=clang_64
    install:
      - pip3 install requests semantic_version lxml
      - python3 3rdparty/qt-downloader macos desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --qt_modules="${QT_MODULES} qtmacextras"
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/clang_64"
      - export QT_QPA_PLATFORM_PLUGIN_PATH=$QTDIR/plugins
      - export PATH="$QTDIR/bin:$PATH"
      - ls 3rdparty
      - chmod a+x 3rdparty/license_writer.sh
      - 3rdparty/license_writer.sh
      - ./install-qtwebkit MacOS_10_13-Clang-MacOS-MacOS_10_13-X86_64
    before_script:
      - du -hs $QTDIR
      - qmake -query
    script:
      - ./build-pyqt5.sh
      - ./build-otter.sh
      - ./build-phantomjs.sh
      - ./build-examples.sh
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-macOS-x86_64.7z
  - name: "VS 2017 x86"
    os: windows
    env:
      CMAKE_GENERATOR="Visual Studio 15 2017"
      QT_INSTALL_DIR=C:/Qt
      DEPLOY=1
      TOOLCHAIN=win32_msvc2017
    before_install:
      - powershell.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File windows_setup.ps1
      - gem install bundler
    install:
      - choco install jom python3 innosetup
      - py -m pip install requests semantic_version lxml
      - py 3rdparty/qt-downloader windows desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --qt_modules="${QT_MODULES} qtwinextras"
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/msvc2017"
      - export QT_QPA_PLATFORM_PLUGIN_PATH="$(cygpath -u $QTDIR/plugins)"
      - export PATH="$(cygpath -u ${QTDIR})/bin:$PATH"
      - 3rdparty/license_writer.sh
      - ./install-qtwebkit Windows_10-MSVC2017-Windows-Windows_10-X86
      - rm $QTDIR/plugins/position/qtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
    script:
      - ./build-otter.sh
      - VS_ARCH=x86 ./build-phantomjs-vs.bat
      - VS_ARCH=x86 ./build-examples-vs.bat
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-msvc2017-x86.7z
  - name: "VS 2017 x86_64"
    os: windows
    env:
      CMAKE_GENERATOR="Visual Studio 15 2017 Win64"
      QT_INSTALL_DIR=C:/Qt
      DEPLOY=1
      TOOLCHAIN=win64_msvc2017_64
    before_install:
      - powershell.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File windows_setup.ps1
      - gem install bundler
    install:
      - choco install jom python3 innosetup
      - py -m pip install requests semantic_version lxml
      - py 3rdparty/qt-downloader windows desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --qt_modules="${QT_MODULES} qtwinextras"
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/msvc2017_64"
      - export QT_QPA_PLATFORM_PLUGIN_PATH="$(cygpath -u $QTDIR/plugins)"
      - export PATH="$(cygpath -u ${QTDIR})/bin:$PATH"
      - 3rdparty/license_writer.sh
      - ./install-qtwebkit Windows_10-MSVC2017-Windows-Windows_10-X86_64
      - rm $QTDIR/plugins/position/qtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
    script:
      - ./build-otter.sh
      - VS_ARCH=amd64 ./build-phantomjs-vs.bat
      - VS_ARCH=amd64 ./build-examples-vs.bat
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-msvc2017-x86_64.7z
  - name: "MinGW 7.3 x86"
    os: windows
    env:
      CMAKE_GENERATOR="MSYS Makefiles"
      CMAKE_ARGS="-DCMAKE_MAKE_PROGRAM=mingw32-make"
      QT_INSTALL_DIR=C:/Qt
      MAKE=mingw32-make
      DEPLOY=1
      TOOLCHAIN=win32_mingw73
    before_install:
      - powershell.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File windows_setup.ps1
      - gem install bundler
    install:
      - choco install python3 innosetup
      - py -m pip install requests semantic_version lxml
      - py 3rdparty/qt-downloader windows desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --qt_modules="${QT_MODULES} qtwinextras" --mingw win32_mingw730
      - ls -R ${QT_INSTALL_DIR}/Tools/
      - export PATH="$(cygpath -u ${QT_INSTALL_DIR})/Tools/mingw730_32/bin:$PATH"
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/mingw73_32"
      - export QT_QPA_PLATFORM_PLUGIN_PATH="$(cygpath -u $QTDIR/plugins)"
      - export PATH="$(cygpath -u ${QTDIR})/bin:$PATH"
      - 3rdparty/license_writer.sh
      - ./install-qtwebkit Windows_7-Mingw73-Windows-Windows_7-X86
      - rm $QTDIR/plugins/position/qtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
      - g++ -v
      - mingw32-make --version
    script:
      - ./build-otter.sh
      - ./build-phantomjs.sh
      - ./build-examples.sh
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-mingw73-x86.7z
  - name: "Linux x86_64"
    os: linux
    env:
      CMAKE_GENERATOR=Ninja
      DEPLOY=1
      TOOLCHAIN=gcc_64
    install:
      - pip3 install requests semantic_version lxml
      - python3 3rdparty/qt-downloader linux desktop ${QT_VERSION} ${TOOLCHAIN} --output=${QT_INSTALL_DIR} --qt_modules="${QT_MODULES} icu"
      - export QTDIR="${QT_INSTALL_DIR}/${QT_VERSION}/${TOOLCHAIN}"
      - export QT_QPA_PLATFORM_PLUGIN_PATH=$QTDIR/plugins
      - export PATH="$QTDIR/bin:$PATH"
      - export LD_LIBRARY_PATH=$QTDIR/lib
      - ls 3rdparty
      - chmod a+x 3rdparty/license_writer.sh
      - 3rdparty/license_writer.sh
      - ./install-qtwebkit RHEL_7_6-GCC-Linux-RHEL_7_6-X86_64
      - rm $QTDIR/plugins/position/libqtposition_serialnmea*
    before_script:
      - du -hs $QTDIR
      - qmake -query
    script:
      - ./build-pyqt5.sh
      - ./build-otter.sh
      - ./build-phantomjs.sh
      - ./build-examples.sh
      - ./create-qa-archive.sh qa-${TRAVIS_JOB_NUMBER}-linux-x86_64.7z
